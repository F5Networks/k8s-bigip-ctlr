stages:
  - Build
  - Test

Build-Image:
  tags: 
    - docker-executor
  stage: Build
  image: ${DOCKER_BUILDER}
  artifacts:
    paths:
      - shared-vars.sh
  
  script:
    - apk update
    - apk add git make python coreutils bash sudo
    - if [ "$DOCKER_NAMESPACE" == "" ]; then DOCKER_NAMESPACE="local"; fi
    - export BASE_PUSH_TARGET="$DOCKER_NAMESPACE/k8s-bigip-ctlr"
    - |
      if [ "$CI_REGISTRY_PASSWORD" == "" -o "$CI_REGISTRY_USER" == "" -o $DOCKER_NAMESPACE == "" ]; then
        echo "[INFO] Docker user, password, or namespace vars absent from travis-ci."
        echo "[INFO] See README.md section 'build' to configure travis with DockerHub."
      else
        docker login -u="$CI_REGISTRY_USER" -p="$CI_REGISTRY_PASSWORD"
        DOCKER_READY="true"
      fi
    - export BUILD_VERSION=$(build-tools/version-tool version)
    - export BUILD_INFO=$(build-tools/version-tool build-info)
    - if [ "$CI_COMMIT_TAG" == "$CI_COMMIT_REF_NAME" ]; then BUILD_VERSION=$CI_COMMIT_TAG; fi
    - export IMG_TAG="${BASE_PUSH_TARGET}:${CI_COMMIT_SHA}"
    - export BUILD_IMG_TAG="${BASE_PUSH_TARGET}-devel:${CI_COMMIT_SHA}"
    - export BUILD_STAMP=devel-$CI_COMMIT_REF_NAME-n-$CI_CONCURRENT_PROJECT_ID-id-$CI_CONCURRENT_ID-$(date +%s)
    - export USER=$(whoami)
    - |
      if echo "$CI_COMMIT_REF_NAME" | grep -Eq "\-stable"; then
        export CTLR_VERSION=v$(echo $CI_COMMIT_REF_NAME | sed s/-stable//g)
        export LICENSE_STRICT=false
      elif echo "$CI_COMMIT_REF_NAME" | grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]*' ; then
        export CTLR_VERSION=$(echo "$CI_COMMIT_REF_NAME" | awk -F'.' '{print $1"."$2}')
        export LICENSE_STRICT=true
      else
        export CTLR_VERSION=$CI_COMMIT_REF_NAME
        export LICENSE_STRICT=false
      fi
    - export CLEAN_BUILD=true
    - export BASE_OS=debian
    - make prod
    - echo "export BUILD_IMG_TAG=$BUILD_IMG_TAG;" >> shared-vars.sh 
    - |
      if [ "$DOCKER_READY" ]; then
      
        docker tag "$IMG_TAG" "$BASE_PUSH_TARGET" 
        docker push "$BASE_PUSH_TARGET:latest"
        docker tag "$IMG_TAG" "$BASE_PUSH_TARGET:$BUILD_STAMP"
        docker push "$BASE_PUSH_TARGET:$BUILD_STAMP"
                
        docker tag "$IMG_TAG" "$BASE_PUSH_TARGET:$BUILD_VERSION"
        docker push "$BASE_PUSH_TARGET:$BUILD_VERSION"
        
        docker tag "$IMG_TAG" "$BUILD_IMG_TAG"
        docker push "$BUILD_IMG_TAG" 
      fi
Test-Image:
  tags: 
    - docker-executor

  stage: Test
  image: ${DOCKER_TESTER}
  before_script:
    - source shared-vars.sh
  
  script:
    - yum install openssh openssh-clients -y 
    - |
      if [[ ! ( -z ${BASTION_KEY} ) && ! ( -z ${BASTION}) ]]; then
        set -x
        SESSION=$(echo $BUILD_IMG_TAG | awk -F ':' '{print $2}')
        chmod 600 ${BASTION_KEY}
        ssh -o "StrictHostKeyChecking=no" -i ${BASTION_KEY} -t ${BASTION} "sed -i  '/bigip_controller_img/c\    \"bigip_controller_img\": \"${BUILD_IMG_TAG}\",' ~/testenv_symbols/testenv_symbols.json"
        if [[ ${ORCHESTRATION} == "k8s" ]] ; then
          ssh -o "StrictHostKeyChecking=no" -i  ${BASTION_KEY} -t ${BASTION} "cd ${TEST_DIR} && scripts/run_systests.sh  --project=bigip_ctlr --session=${SESSION}-cluster --include-tags=${INCLUDE_TAGS} --orchestration=k8s --pool-mode=cluster --namespace-mode=${NAMESPACE_MODE} --exclude-tags=${EXCLUDE_TAGS}" ;
          ssh -o "StrictHostKeyChecking=no" -i  ${BASTION_KEY} -t ${BASTION} "cd ${TEST_DIR} && scripts/run_systests.sh  --project=bigip_ctlr --session=${SESSION}-nodeport --include-tags=${INCLUDE_TAGS} --orchestration=k8s --pool-mode=nodeport --namespace-mode=${NAMESPACE_MODE} --exclude-tags=${EXCLUDE_TAGS}" ;
          
        elif [[ ${ORCHESTRATION} == "oscp" || ${ORCHESTRATION} == "os" ]] ; then
          ssh -o "StrictHostKeyChecking=no" -i  ${BASTION_KEY} -t ${BASTION} "cd ${TEST_DIR} && scripts/run_systests.sh   --project=bigip_ctlr --session=${SESSION}-cluster --include-tags=${INCLUDE_TAGS} --orchestration=openshift --pool-mode=cluster --namespace-mode=${NAMESPACE_MODE} --exclude-tags=${EXCLUDE_TAGS}" ;
          ssh -o "StrictHostKeyChecking=no" -i  ${BASTION_KEY} -t ${BASTION} "cd ${TEST_DIR} && scripts/run_systests.sh   --project=bigip_ctlr --session=${SESSION}-nodeport --include-tags=${INCLUDE_TAGS} --orchestration=openshift --pool-mode=nodeport --namespace-mode=${NAMESPACE_MODE} --exclude-tags=${EXCLUDE_TAGS}" ;
          
        else
          echo "Invalid Orchestration. Exiting...";
          exit 1;
        fi ;
      else
        yum install -y epel-release && yum clean all
        yum install git unzip wget make openssh python python-pip  -y
        pip install ansible==2.6.5
        # Cloning Glider Repo
        export GIT_ASKPASS=${PWD}/git_config.sh
        mkdir glider
        echo $GLIDER_REPO
        pushd glider
        echo -e '#!/bin/bash \necho $GIT_PASSWORD' > $GIT_ASKPASS
        chmod +x $GIT_ASKPASS
        git init && git config http.sslVerify false
        git config credential.https://gitswarm.f5net.com.username ${GITLAB_USER_LOGIN}
        git pull $GLIDER_REPO
        chmod +x run_glider.sh 
        sh run_glider.sh --functest-setup | tee /tmp/terraform_log_setup;
        echo "Checking for any Failures in SETUP";
        grep -q "error(s) occurred:" /tmp/terraform_log_setup;
        if [ $? == 0 ]; then
          sh run_glider.sh --functest-run --pool-mode='cluster';
          sh run_glider.sh --functest-run --pool-mode='nodeport';
        else
          echo "ERROR : Terraform infrastructre failed";
          echo "Running teardown functionality.";
        fi
        sh run_glider.sh --functest-teardown | tee /tmp/terraform_log_teardown;
        echo "Checking for any Failures in TEARDOWN";
        grep -q "error(s) occurred:" /tmp/terraform_log_teardown;
        if [ $? != 0 ]; then
          echo "ERROR :  Teardown Not successful, kindly delete infrastructure Manually";
          exit 1
        fi
        popd
      fi
