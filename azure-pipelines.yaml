# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  tags:
    include:
      - v*

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'f5networks/k8s-bigip-ctlr-devel'
  quayConnection: 'quay-bot'
  redhatConnection: 'redhat-bot'
  dockerConnection: 'docker-bot'
  scanConnection: 'cis-scan-bot'
  quay_path: 'quay.io/f5networks/k8s-bigip-ctlr-devel'
  redhat_prj_name: 'cntr-ingress-svcs'
  docker_repo: 'f5networks/k8s-bigip-ctlr'
  chartPath: 'incubator'
  chartRepoName: 'k8s-bigip-ctlr'
  chartOrganization: F5Networks
  helmVersion: 'v3.6.3'
  chartsUpdated: False
  operatorUpdated: False
  operatorImageName: 'f5networks/f5-cis-operator-devel'
  operatorBundleImageName: 'f5networks/f5-cis-operator-bundle-devel'
  operatorIndexImage: 'f5networks/f5-cis-operator-index-devel'
  goVersion: 1.22.7

stages:
  - stage: VerifyFormatting
    dependsOn: []
    jobs:
      - job: VerifyFormatting
        steps:
          - task: GoTool@0
            inputs:
              version: $(goVersion)
            displayName: Install Go
          - task: CmdLine@2
            displayName: Check Go format and Suspicious constructs
            inputs:
              script: 'make verify'
  - stage: RunUnitTests
    dependsOn: []
    jobs:
      - job: RunUnitTests
        steps:
          - task: CmdLine@2
            displayName: Check for unit tests
            inputs:
              script: |
                docker run -t -v $(System.DefaultWorkingDirectory):/go/src/github.com/F5Networks/k8s-bigip-ctlr -w /go/src/github.com/F5Networks/k8s-bigip-ctlr --rm golang:$(goVersion) make test
          - task: PublishTestResults@2
            displayName: Publish Test Results
            inputs:
              testRunner: JUnit
              testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
  - stage: RunCoverage
    dependsOn: []
    jobs:
      - job: RunCoverage
        steps:
          - task: CmdLine@2
            displayName: Check for Coverage
            inputs:
              script: |
                docker run -t -v $(System.DefaultWorkingDirectory):/go/src/github.com/F5Networks/k8s-bigip-ctlr -w /go/src/github.com/F5Networks/k8s-bigip-ctlr --rm golang:$(goVersion) make coverage
                mkdir -p $(System.DefaultWorkingDirectory)/coverage
                cp -r coverage.html $(System.DefaultWorkingDirectory)/coverage
  - stage: CheckDocumentation
    dependsOn: []
    jobs:
      - job: CheckDocumentation
        steps:
          - task: CmdLine@2
            displayName: Check documentation
            inputs:
              script: 'make docs'
  - stage: ContainerImage
    dependsOn:
        - VerifyFormatting
        - RunUnitTests
        - RunCoverage
    jobs:
      - job: BuildContainerImage
        steps:
          - script: |
              FILE_VALUE=$(cat next-version.txt)
              echo "##vso[task.setvariable variable=BUILD_VERSION]$FILE_VALUE"
            displayName: Set CIS Version
          - script: echo $(BUILD_VERSION)
            displayName: 'Display the variable value'
          - task: Docker@2
            displayName: Login to redhat registry
            inputs:
              command: login
              containerRegistry: $(redhatConnection)
          - task: Docker@2
            displayName: Login to quay registry
            inputs:
              command: login
              containerRegistry: $(quayConnection)
          - task: Docker@2
            displayName: Login to docker registry
            condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
            inputs:
              command: login
              containerRegistry: $(dockerConnection)
          - task: Docker@2
            displayName: Login to scan registry
            condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
            inputs:
              command: login
              containerRegistry: $(scanConnection)
          - task: Docker@2
            displayName: Build from Red Hat Universal Base Image
            inputs:
              command: build
              containerRegistry: $(quayConnection)
              repository: $(imageName)
              Dockerfile: build-tools/Dockerfile.ubi
              buildContext: .
              tags: "$(BUILD_VERSION)-$(Build.SourceVersion)"
              arguments: "--build-arg BUILD_INFO=azure-$(Build.BuildId)-$(Build.SourceVersion) --build-arg BUILD_VERSION=$(BUILD_VERSION)"
          - task: Docker@2
            displayName: Push image to Quay
            inputs:
              command: push
              containerRegistry: $(quayConnection)
              repository: $(imageName)
              tags: "$(BUILD_VERSION)-$(Build.SourceVersion)"
          - script: |
              set -ex
              podman pull --authfile $(DOCKER_CONFIG)/config.json $(quay_path):$(BUILD_VERSION)-$(Build.SourceVersion)
              podman tag $(quay_path):$(BUILD_VERSION)-$(Build.SourceVersion) scan.connect.redhat.com/$(REDHAT_PRJ_ID)/$(redhat_prj_name):$(BUILD_VERSION)-ubi8
              podman push --authfile $(DOCKER_CONFIG)/config.json scan.connect.redhat.com/$(REDHAT_PRJ_ID)/$(redhat_prj_name):$(BUILD_VERSION)-ubi8
            condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
            displayName: 'Push image to Redhat'
            continueOnError: true
          - script: |
              set -ex
              docker pull $(quay_path):$(BUILD_VERSION)-$(Build.SourceVersion)
              docker tag $(quay_path):$(BUILD_VERSION)-$(Build.SourceVersion) $(docker_repo):latest
              docker tag $(quay_path):$(BUILD_VERSION)-$(Build.SourceVersion) $(docker_repo):$(BUILD_VERSION)
              patch_version=`echo $(BUILD_VERSION) | awk -F '.'  '{print $3}'`
              if [ "${patch_version}" == "0" ] ; then
                stripped_version=`echo $(BUILD_VERSION) | rev | cut -c3- | rev`
                docker tag $(quay_path):$(BUILD_VERSION)-$(Build.SourceVersion) $(docker_repo):${stripped_version}
                docker push $(docker_repo):${stripped_version}
              fi
              docker push $(docker_repo):latest
              docker push $(docker_repo):$(BUILD_VERSION)
            displayName: 'Push image to DockerHub'
            condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
  - stage: ScanContainerImage
    dependsOn: ContainerImage
    jobs:
      - job: ScanContainerImage
        steps:
          - script: |
              FILE_VALUE=$(cat next-version.txt)
              echo "##vso[task.setvariable variable=BUILD_VERSION]$FILE_VALUE"
            displayName: Set CIS Version
          - script: echo $(BUILD_VERSION)
            displayName: 'Display the variable value'
          - task: CmdLine@2
            displayName: Install Trivy
            inputs:
              script: |
                sudo apt-get install wget apt-transport-https gnupg lsb-release
                wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
                echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
                sudo apt-get update
                sudo apt-get install trivy
          - task: CmdLine@2
            displayName: "Run trivy scan"
            inputs:
              script: |
                trivy image --timeout 10m --format template --template "@junit.tpl" -o test.xml --severity HIGH,CRITICAL $(quay_path):$(BUILD_VERSION)-$(Build.SourceVersion)
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/test.xml'
              mergeTestResults: true
              failTaskOnFailedTests: false
              testRunTitle: 'Trivy - Vulnerabilities Summary'
  - stage: Charts
    dependsOn: []
    jobs:
      - job: BuildCharts
        steps:
          - script: |
              FILE_VALUE=$(cat next-version.txt)
              echo "##vso[task.setvariable variable=BUILD_VERSION]$FILE_VALUE"
            displayName: Set CIS Version
          - script: |
              git diff HEAD HEAD~ --name-only | grep "helm-charts/\|docs/cis-3.x/config_examples/customResourceDefinitions"
              if  [ $? == 0 ] ; then echo "##vso[task.setvariable variable=chartsUpdated]True"; fi
              git diff HEAD HEAD~ --name-only | grep "helm-charts/\|docs/cis3.x/rbac/clusterrole.yaml"
              if  [ $? == 0 ] ; then echo "##vso[task.setvariable variable=chartsUpdated]True"; fi
            displayName: Check Helm changes
          - script: echo '##vso[task.setvariable variable=chartPath]stable'
            displayName: "Set the helm chart release directory as stable if the Build.SourceBranch starts with 'refs/tags/' "
            condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
          - script: |
              curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
              chmod 700 get_helm.sh
              ./get_helm.sh --version $helmVersion
            displayName: Install Helm
            failOnStderr: true
            condition: and(succeeded(), or(startsWith(variables['build.sourceBranch'], 'refs/tags/'), eq(variables['chartsUpdated'], 'True')) )
          - task: UsePythonVersion@0
            displayName: Install Python
            inputs:
              versionSpec: '3.8'
              addToPath: true
              architecture: 'x64'
            condition: and(succeeded(), or(startsWith(variables['build.sourceBranch'], 'refs/tags/'), eq(variables['chartsUpdated'], 'True')) )
          - script: |
              mkdir -p ./helm-charts/f5-bigip-ctlr/crds
              cp ./docs/cis-3.x/config_examples/customResourceDefinitions/$(chartPath)/customresourcedefinitions.yml ./helm-charts/f5-bigip-ctlr/crds/f5-bigip-ctlr-customresourcedefinitions.yml
              sed -i '/^metadata:/r ./helm-charts/labels.txt' ./helm-charts/f5-bigip-ctlr/crds/f5-bigip-ctlr-customresourcedefinitions.yml
              # Use sed to insert the annotations
              sed -i "/name: deployconfigs.cis.f5.com/a\  annotations:\n    \"helm.sh/hook\": crd-install" ./helm-charts/f5-bigip-ctlr/crds/f5-bigip-ctlr-customresourcedefinitions.yml
              pip install --disable-pip-version-check -r ./build-tools/py-requirements.txt
              python ./build-tools/helm-clusterrole-gen.py
              helm lint --strict ./helm-charts/f5-bigip-ctlr --set 'args.cm_url=https://example.com'
              helm package ./helm-charts/f5-bigip-ctlr --destination .deploy/

            displayName: Package Helm Chart
            failOnStderr: true
            condition: and(succeeded(), or(startsWith(variables['build.sourceBranch'], 'refs/tags/'), eq(variables['chartsUpdated'], 'True')) )
          - script: |
              set -ex
              git clone --single-branch --branch gh-pages https://$(PAT)@github.com/$(chartOrganization)/$(chartRepoName).git /tmp/$(chartRepoName)
              mkdir -p /tmp/$(chartRepoName)/helm-charts/$(chartPath)
              cp -rf .deploy/*.tgz /tmp/$(chartRepoName)/helm-charts/$(chartPath)/
              cp -rf helm-charts/f5-bigip-ctlr/README.md /tmp/$(chartRepoName)/helm-charts/
              cp -rf README.md /tmp/$(chartRepoName)/
              pushd /tmp/$(chartRepoName)
              git config user.email "v.lohiya@f5.com"
              git config user.name "cisbotctlr"
              helm repo index --url https://$(chartOrganization).github.io/$(chartRepoName)/helm-charts/$(chartPath) helm-charts/$(chartPath)
              git add --all
              git commit -m 'Updating charts for CIS Release v$(BUILD_VERSION) and Build Info azure-$(Build.BuildId)-$(Build.SourceVersion) in $(chartPath)'
              git push origin gh-pages
              popd
            displayName: Upload charts
            condition: and(succeeded(), or(startsWith(variables['build.sourceBranch'], 'refs/tags/'), eq(variables['chartsUpdated'], 'True')) )
  - stage: Operator
    dependsOn: []
    jobs:
      - job: BuildOperator
        steps:
          - script: |
              git diff HEAD HEAD~ --name-only | grep "helm-charts/\|f5-bigip-ctlr-operator/\|docs/cis3.x/rbac/clusterrole.yaml"
              if [ $? == 0 ] ; then echo "##vso[task.setvariable variable=operatorUpdated]True"; fi
            displayName: Check Operator changes
          - task: Docker@2
            displayName: Login to quay registry
            condition: and(succeeded(), eq(variables['operatorUpdated'], 'True'))
            inputs:
              command: login
              containerRegistry: $(quayConnection)
          - task: Docker@2
            displayName: Login to redhat registry
            condition: and(succeeded(), eq(variables['operatorUpdated'], 'True'))
            inputs:
              command: login
              containerRegistry: $(redhatConnection)
          - task: UsePythonVersion@0
            displayName: Install Python
            inputs:
              versionSpec: '3.8'
              addToPath: true
              architecture: 'x64'
            condition: and(succeeded(), eq(variables['operatorUpdated'], 'True'))
          - script: |
              pip install --disable-pip-version-check -r ./build-tools/py-requirements.txt
              python ./build-tools/helm-clusterrole-gen.py
            displayName: 'Generate the ClusterRole file'
            condition: and(succeeded(), eq(variables['operatorUpdated'], 'True'))
          - task: Docker@2
            displayName: Build Operator Image for test
            inputs:
              command: build
              containerRegistry: $(quayConnection)
              repository: $(operatorImageName)
              Dockerfile: f5-bigip-ctlr-operator/Dockerfile
              buildContext: .
              tags: $(Build.SourceVersion)
            condition: and(succeeded(), eq(variables['operatorUpdated'], 'True'))
          - task: Docker@2
            displayName: Push image to Quay for testing
            condition: and(succeeded(), eq(variables['operatorUpdated'], 'True'))
            inputs:
              command: push
              containerRegistry: $(quayConnection)
              repository: $(operatorImageName)
              tags: $(Build.SourceVersion)
          - script: |
              sed -i 's|registry.connect.redhat.com/f5networks/k8s-bigip-ctlr-operator:latest|quay.io/$(operatorImageName):$(Build.SourceVersion)|g' ./f5-bigip-ctlr-operator/bundle/manifests/f5-bigip-ctlr-operator.clusterserviceversion.yaml
            displayName: 'Prepare the charts repo for bunding with operator'
            condition: and(succeeded(), eq(variables['operatorUpdated'], 'True'))
          - task: Docker@2
            displayName: Build Operator Bundle for test
            condition: and(succeeded(), eq(variables['operatorUpdated'], 'True'))
            inputs:
              command: build
              containerRegistry: $(quayConnection)
              repository: $(operatorBundleImageName)
              Dockerfile: f5-bigip-ctlr-operator/bundle.Dockerfile
              buildContext: f5-bigip-ctlr-operator
              tags: $(Build.SourceVersion)
          - task: Docker@2
            displayName: Push Operator Bundle image to Quay for testing
            condition: and(succeeded(), eq(variables['operatorUpdated'], 'True'))
            inputs:
              command: push
              containerRegistry: $(quayConnection)
              repository: $(operatorBundleImageName)
              tags: $(Build.SourceVersion)
          - script: |
              wget http://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest-4.16/opm-linux.tar.gz
              tar xvf opm-linux.tar.gz
              ./opm-rhel8 index add --bundles quay.io/$(operatorBundleImageName):$(Build.SourceVersion) --tag quay.io/$(operatorIndexImage):$(Build.SourceVersion) 
              podman push quay.io/$(operatorIndexImage):$(Build.SourceVersion)
            displayName: Updating the operator index image
            condition: and(succeeded(), eq(variables['operatorUpdated'], 'True'))
