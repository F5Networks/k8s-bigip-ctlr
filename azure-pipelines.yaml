# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  tags:
    include:
      - v*

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'f5networks/k8s-bigip-ctlr-devel'
  quayConnection: 'quay-bot'
  redhatConnection: 'redhat-bot'
  dockerConnection: 'docker-bot'
  scanConnection: 'cis-scan-bot'
  quay_path: 'quay.io/f5networks/k8s-bigip-ctlr-devel'
  redhat_prj_name: 'cntr-ingress-svcs'
  redhat_tag: '$(BUILD_VERSION)-rhel7'
  docker_version: '$(BUILD_VERSION)'
  docker_repo: 'f5networks/k8s-bigip-ctlr'

steps:
  - task: Docker@2
    displayName: Login to redhat registry
    inputs:
      command: login
      containerRegistry: $(redhatConnection)
  - task: Docker@2
    displayName: Login to quay registry
    inputs:
      command: login
      containerRegistry: $(quayConnection)
  - task: Docker@2
    displayName: Login to docker registry
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    inputs:
      command: login
      containerRegistry: $(dockerConnection)
  - task: Docker@2
    displayName: Login to scan registry
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    inputs:
      command: login
      containerRegistry: $(scanConnection)
  - task: CmdLine@2
    displayName: Check documentation
    inputs:
      script: 'make docs'
  - task: Docker@2
    displayName: Build from Red Hat Universal Base Image
    inputs:
      command: build
      containerRegistry: $(quayConnection)
      repository: $(imageName)
      Dockerfile: build-tools/Dockerfile-int
      buildContext: .
      tags: $(Build.SourceVersion)
      arguments: "--build-arg BUILD_INFO=azure-$(Build.BuildId)-$(Build.SourceVersion) --build-arg BUILD_VERSION=$(BUILD_VERSION) --build-arg RUN_TESTS=$(RUN_TESTS)"
  - task: Docker@2
    displayName: Push image to Quay
    inputs:
      command: push
      containerRegistry: $(quayConnection)
      repository: $(imageName)
      tags: $(Build.SourceVersion)
  - script: |
      set -ex
      podman pull --authfile $(DOCKER_CONFIG)/config.json $(quay_path):$(Build.SourceVersion)
      podman tag $(quay_path):$(Build.SourceVersion) scan.connect.redhat.com/$(REDHAT_PRJ_ID)/$(redhat_prj_name):$(redhat_tag)
      podman push --authfile $(DOCKER_CONFIG)/config.json scan.connect.redhat.com/$(REDHAT_PRJ_ID)/$(redhat_prj_name):$(redhat_tag)
    condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
    displayName: 'Push image to Redhat'
    continueOnError: true
  - script: |
      set -ex
      docker pull $(quay_path):$(Build.SourceVersion)
      docker tag $(quay_path):$(Build.SourceVersion) $(docker_repo):latest
      docker tag $(quay_path):$(Build.SourceVersion) $(docker_repo):$(docker_version)
      if [[ $(docker_version: -1) -eq 0 ]]
      then 
        docker tag $(quay_path):$(Build.SourceVersion) $(docker_repo):$(docker_version:0:$(#docker_version)-2)
        docker push $(docker_repo):$(docker_version:0:$(#docker_version)-2)
      fi
      docker push $(docker_repo):latest
      docker push $(docker_repo):$(docker_version)
    displayName: 'Push image to DockerHub'
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
