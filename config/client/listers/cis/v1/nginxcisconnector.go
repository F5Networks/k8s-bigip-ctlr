/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/F5Networks/k8s-bigip-ctlr/config/apis/cis/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NginxCisConnectorLister helps list NginxCisConnectors.
type NginxCisConnectorLister interface {
	// List lists all NginxCisConnectors in the indexer.
	List(selector labels.Selector) (ret []*v1.NginxCisConnector, err error)
	// NginxCisConnectors returns an object that can list and get NginxCisConnectors.
	NginxCisConnectors(namespace string) NginxCisConnectorNamespaceLister
	NginxCisConnectorListerExpansion
}

// nginxCisConnectorLister implements the NginxCisConnectorLister interface.
type nginxCisConnectorLister struct {
	indexer cache.Indexer
}

// NewNginxCisConnectorLister returns a new NginxCisConnectorLister.
func NewNginxCisConnectorLister(indexer cache.Indexer) NginxCisConnectorLister {
	return &nginxCisConnectorLister{indexer: indexer}
}

// List lists all NginxCisConnectors in the indexer.
func (s *nginxCisConnectorLister) List(selector labels.Selector) (ret []*v1.NginxCisConnector, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NginxCisConnector))
	})
	return ret, err
}

// NginxCisConnectors returns an object that can list and get NginxCisConnectors.
func (s *nginxCisConnectorLister) NginxCisConnectors(namespace string) NginxCisConnectorNamespaceLister {
	return nginxCisConnectorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NginxCisConnectorNamespaceLister helps list and get NginxCisConnectors.
type NginxCisConnectorNamespaceLister interface {
	// List lists all NginxCisConnectors in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.NginxCisConnector, err error)
	// Get retrieves the NginxCisConnector from the indexer for a given namespace and name.
	Get(name string) (*v1.NginxCisConnector, error)
	NginxCisConnectorNamespaceListerExpansion
}

// nginxCisConnectorNamespaceLister implements the NginxCisConnectorNamespaceLister
// interface.
type nginxCisConnectorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NginxCisConnectors in the indexer for a given namespace.
func (s nginxCisConnectorNamespaceLister) List(selector labels.Selector) (ret []*v1.NginxCisConnector, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NginxCisConnector))
	})
	return ret, err
}

// Get retrieves the NginxCisConnector from the indexer for a given namespace and name.
func (s nginxCisConnectorNamespaceLister) Get(name string) (*v1.NginxCisConnector, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nginxcisconnector"), name)
	}
	return obj.(*v1.NginxCisConnector), nil
}
