/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/F5Networks/k8s-bigip-ctlr/v2/config/apis/cis/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TLSProfileLister helps list TLSProfiles.
// All objects returned here must be treated as read-only.
type TLSProfileLister interface {
	// List lists all TLSProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.TLSProfile, err error)
	// TLSProfiles returns an object that can list and get TLSProfiles.
	TLSProfiles(namespace string) TLSProfileNamespaceLister
	TLSProfileListerExpansion
}

// tLSProfileLister implements the TLSProfileLister interface.
type tLSProfileLister struct {
	indexer cache.Indexer
}

// NewTLSProfileLister returns a new TLSProfileLister.
func NewTLSProfileLister(indexer cache.Indexer) TLSProfileLister {
	return &tLSProfileLister{indexer: indexer}
}

// List lists all TLSProfiles in the indexer.
func (s *tLSProfileLister) List(selector labels.Selector) (ret []*v1.TLSProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TLSProfile))
	})
	return ret, err
}

// TLSProfiles returns an object that can list and get TLSProfiles.
func (s *tLSProfileLister) TLSProfiles(namespace string) TLSProfileNamespaceLister {
	return tLSProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TLSProfileNamespaceLister helps list and get TLSProfiles.
// All objects returned here must be treated as read-only.
type TLSProfileNamespaceLister interface {
	// List lists all TLSProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.TLSProfile, err error)
	// Get retrieves the TLSProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.TLSProfile, error)
	TLSProfileNamespaceListerExpansion
}

// tLSProfileNamespaceLister implements the TLSProfileNamespaceLister
// interface.
type tLSProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TLSProfiles in the indexer for a given namespace.
func (s tLSProfileNamespaceLister) List(selector labels.Selector) (ret []*v1.TLSProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TLSProfile))
	})
	return ret, err
}

// Get retrieves the TLSProfile from the indexer for a given namespace and name.
func (s tLSProfileNamespaceLister) Get(name string) (*v1.TLSProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("tlsprofile"), name)
	}
	return obj.(*v1.TLSProfile), nil
}
