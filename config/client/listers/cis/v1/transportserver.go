/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/F5Networks/k8s-bigip-ctlr/config/apis/cis/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TransportServerLister helps list TransportServers.
type TransportServerLister interface {
	// List lists all TransportServers in the indexer.
	List(selector labels.Selector) (ret []*v1.TransportServer, err error)
	// TransportServers returns an object that can list and get TransportServers.
	TransportServers(namespace string) TransportServerNamespaceLister
	TransportServerListerExpansion
}

// transportServerLister implements the TransportServerLister interface.
type transportServerLister struct {
	indexer cache.Indexer
}

// NewTransportServerLister returns a new TransportServerLister.
func NewTransportServerLister(indexer cache.Indexer) TransportServerLister {
	return &transportServerLister{indexer: indexer}
}

// List lists all TransportServers in the indexer.
func (s *transportServerLister) List(selector labels.Selector) (ret []*v1.TransportServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TransportServer))
	})
	return ret, err
}

// TransportServers returns an object that can list and get TransportServers.
func (s *transportServerLister) TransportServers(namespace string) TransportServerNamespaceLister {
	return transportServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TransportServerNamespaceLister helps list and get TransportServers.
type TransportServerNamespaceLister interface {
	// List lists all TransportServers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.TransportServer, err error)
	// Get retrieves the TransportServer from the indexer for a given namespace and name.
	Get(name string) (*v1.TransportServer, error)
	TransportServerNamespaceListerExpansion
}

// transportServerNamespaceLister implements the TransportServerNamespaceLister
// interface.
type transportServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TransportServers in the indexer for a given namespace.
func (s transportServerNamespaceLister) List(selector labels.Selector) (ret []*v1.TransportServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TransportServer))
	})
	return ret, err
}

// Get retrieves the TransportServer from the indexer for a given namespace and name.
func (s transportServerNamespaceLister) Get(name string) (*v1.TransportServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("transportserver"), name)
	}
	return obj.(*v1.TransportServer), nil
}
