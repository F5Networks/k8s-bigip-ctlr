/*-
 * Copyright (c) 2016-2020, F5 Networks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cccl

import (
	"bytes"
	"crypto/tls"
	"crypto/x509"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"time"

	. "github.com/F5Networks/k8s-bigip-ctlr/pkg/resource"
	log "github.com/F5Networks/k8s-bigip-ctlr/pkg/vlogger"
	"github.com/F5Networks/k8s-bigip-ctlr/pkg/writer"
)

// AS3AS3Manager holds all the AS3 orchestration specific config
type CCCLManager struct {
	configWriter writer.Writer
	eventChan    chan interface{}
	ResourceRequest
	//TODO: Need to remove post CIS2.2
	BIGIPUsername string
	BIGIPPassword string
	BIGIPURL      string
	TrustedCerts  string
	SSLInsecure   bool
}

// Struct to allow NewManager to receive all or only specific parameters.
type Params struct {
	ConfigWriter writer.Writer
	EventChan    chan interface{}
	//TODO: Remove this post CIS2.2
	BIGIPUsername string
	BIGIPPassword string
	BIGIPURL      string
	TrustedCerts  string
	SSLInsecure   bool
}

const (
	baseAS3Config = `{
		"$schema": "https://raw.githubusercontent.com/F5Networks/f5-appsvcs-extension/master/schema/3.18.0/as3-schema-3.18.0-4.json",
		"class": "AS3",
		"declaration": {
		  "class": "ADC",
		  "schemaVersion": "3.18.0",
		  "label": "CIS Declaration",
		  "remark": "Auto-generated by CIS"
		}
	  }
	  `
	timeoutLarge = 60 * time.Second
)

// Create and return a new app manager that meets the Manager interface
func NewCCCLManager(params *Params) *CCCLManager {
	ccclManager := CCCLManager{
		configWriter: params.ConfigWriter,
		eventChan:    params.EventChan,
		//TODO: Remove this post CIS2.0
		BIGIPPassword: params.BIGIPPassword,
		BIGIPURL:      params.BIGIPURL,
		BIGIPUsername: params.BIGIPUsername,
		TrustedCerts:  params.TrustedCerts,
		SSLInsecure:   params.SSLInsecure,
	}
	return &ccclManager
}

func (cm *CCCLManager) ConfigWriter() writer.Writer {
	return cm.configWriter
}

//TODO: Remove this post CIS2.2
// Method to delete any AS3 partition
func (cm *CCCLManager) DeleteAS3Partition(partition string) {
	var as3Config map[string]interface{}
	_ = json.Unmarshal([]byte(baseAS3Config), &as3Config)
	decl := as3Config["declaration"].(map[string]interface{})
	decl[DEFAULT_PARTITION+"_AS3"] = map[string]string{"class": "Tenant"}
	data, _ := json.Marshal(as3Config)
	cm.postConfig(string(data))
}

//TODO: Remove this post CIS2.2
//Post empty AS3 declaration to remove _AS3 partition.
func (cm *CCCLManager) postConfig(data string) {
	httpReqBody := bytes.NewBuffer([]byte(data))
	req, err := http.NewRequest("POST", cm.BIGIPURL+"/mgmt/shared/appsvcs/declare", httpReqBody)
	if err != nil {
		log.Errorf("[CCCL] Creating new HTTP request error: %v ", err)
		return
	}
	log.Debug("[CCCL] posting request to BIGIP.")
	req.SetBasicAuth(cm.BIGIPUsername, cm.BIGIPPassword)
	// Get the SystemCertPool, continue with an empty pool on error
	rootCAs, _ := x509.SystemCertPool()
	if rootCAs == nil {
		rootCAs = x509.NewCertPool()
	}
	// TODO: Make sure appMgr sets certificates in bigipInfo
	certs := []byte(cm.TrustedCerts)

	// Append our certs to the system pool
	if ok := rootCAs.AppendCertsFromPEM(certs); !ok {
		log.Debug("[CCCL] No certs appended, using only system certs")
	}
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{
			InsecureSkipVerify: cm.SSLInsecure,
			RootCAs:            rootCAs,
		},
	}
	httpClient := &http.Client{
		Transport: tr,
		Timeout:   timeoutLarge,
	}
	httpResp, err := httpClient.Do(req)
	if err != nil {
		log.Errorf("[CCCL] REST call error: %v ", err)
		return
	}
	defer httpResp.Body.Close()

	body, err := ioutil.ReadAll(httpResp.Body)
	if err != nil {
		log.Errorf("[CCCL] REST call response error: %v ", err)
		return
	}
	var response map[string]interface{}
	err = json.Unmarshal(body, &response)
	if err != nil {
		log.Errorf("[CCCL] Response body unmarshal failed: %v\n", err)
		return
	}
	if httpResp == nil {
		log.Debug("[CCCL] HTTP Response Error.")
		return
	}
	if httpResp.StatusCode == 200 {
		results := (response["results"]).([]interface{})
		for _, value := range results {
			v := value.(map[string]interface{})
			//log result with code, tenant and message
			log.Debugf("[CCCL] Response from BIG-IP: code: %v --- tenant:%v --- message: %v", v["code"], v["tenant"], v["message"])
		}
	} else {
		log.Debugf("[CCCL] Response Error: %v", response)
	}
}
