/*-
 * Copyright (c) 2016-2021, F5 Networks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cccl

import (
	"time"

	. "github.com/F5Networks/k8s-bigip-ctlr/v2/pkg/resource"
	"github.com/F5Networks/k8s-bigip-ctlr/v2/pkg/writer"
)

// AS3AS3Manager holds all the AS3 orchestration specific config
type CCCLManager struct {
	configWriter writer.Writer
	eventChan    chan interface{}
	ResourceRequest
	//TODO: Need to remove post CIS2.2
	BIGIPUsername string
	BIGIPPassword string
	BIGIPURL      string
	TrustedCerts  string
	SSLInsecure   bool
}

// Struct to allow NewManager to receive all or only specific parameters.
type Params struct {
	ConfigWriter writer.Writer
	EventChan    chan interface{}
	//TODO: Remove this post CIS2.2
	BIGIPUsername string
	BIGIPPassword string
	BIGIPURL      string
	TrustedCerts  string
	SSLInsecure   bool
}

const (
	baseAS3Config = `{
		"$schema": "https://raw.githubusercontent.com/F5Networks/f5-appsvcs-extension/master/schema/3.18.0/as3-schema-3.18.0-4.json",
		"class": "AS3",
		"declaration": {
		  "class": "ADC",
		  "schemaVersion": "3.18.0",
		  "label": "CIS Declaration",
		  "remark": "Auto-generated by CIS"
		}
	  }
	  `
	timeoutLarge = 60 * time.Second
)

// Create and return a new app manager that meets the Manager interface
func NewCCCLManager(params *Params) *CCCLManager {
	ccclManager := CCCLManager{
		configWriter: params.ConfigWriter,
		eventChan:    params.EventChan,
		//TODO: Remove this post CIS2.0
		BIGIPPassword: params.BIGIPPassword,
		BIGIPURL:      params.BIGIPURL,
		BIGIPUsername: params.BIGIPUsername,
		TrustedCerts:  params.TrustedCerts,
		SSLInsecure:   params.SSLInsecure,
	}
	return &ccclManager
}

func (cm *CCCLManager) ConfigWriter() writer.Writer {
	return cm.configWriter
}
