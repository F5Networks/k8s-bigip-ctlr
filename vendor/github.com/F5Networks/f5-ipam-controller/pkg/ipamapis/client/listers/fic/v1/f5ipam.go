/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/F5Networks/f5-ipam-controller/pkg/ipamapis/apis/fic/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// F5IPAMLister helps list F5IPAMs.
type F5IPAMLister interface {
	// List lists all F5IPAMs in the indexer.
	List(selector labels.Selector) (ret []*v1.F5IPAM, err error)
	// F5IPAMs returns an object that can list and get F5IPAMs.
	F5IPAMs(namespace string) F5IPAMNamespaceLister
	F5IPAMListerExpansion
}

// f5IPAMLister implements the F5IPAMLister interface.
type f5IPAMLister struct {
	indexer cache.Indexer
}

// NewF5IPAMLister returns a new F5IPAMLister.
func NewF5IPAMLister(indexer cache.Indexer) F5IPAMLister {
	return &f5IPAMLister{indexer: indexer}
}

// List lists all F5IPAMs in the indexer.
func (s *f5IPAMLister) List(selector labels.Selector) (ret []*v1.F5IPAM, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.F5IPAM))
	})
	return ret, err
}

// F5IPAMs returns an object that can list and get F5IPAMs.
func (s *f5IPAMLister) F5IPAMs(namespace string) F5IPAMNamespaceLister {
	return f5IPAMNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// F5IPAMNamespaceLister helps list and get F5IPAMs.
type F5IPAMNamespaceLister interface {
	// List lists all F5IPAMs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.F5IPAM, err error)
	// Get retrieves the F5IPAM from the indexer for a given namespace and name.
	Get(name string) (*v1.F5IPAM, error)
	F5IPAMNamespaceListerExpansion
}

// f5IPAMNamespaceLister implements the F5IPAMNamespaceLister
// interface.
type f5IPAMNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all F5IPAMs in the indexer for a given namespace.
func (s f5IPAMNamespaceLister) List(selector labels.Selector) (ret []*v1.F5IPAM, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.F5IPAM))
	})
	return ret, err
}

// Get retrieves the F5IPAM from the indexer for a given namespace and name.
func (s f5IPAMNamespaceLister) Get(name string) (*v1.F5IPAM, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("f5ipam"), name)
	}
	return obj.(*v1.F5IPAM), nil
}
